pipeline {
    agent any

    environment {
        NODEJS_HOME = tool name: 'NodeJS', type: 'jenkins.plugins.nodejs.tools.NodeJSInstallation'
        PATH = "${NODEJS_HOME}/bin:${env.PATH}"
        GIT_CREDENTIALS = 'MyGitHubCreds'  // Your Git credentials ID
        TOMCAT_CREDENTIALS = 'tomcatcredentialshub'  // Your Tomcat credentials ID
        TOMCAT_URL = 'http://localhost:9090/manager/text'  // Tomcat Manager URL
    }


    stages {
        stage('Checkout') {
            steps {
                // Correct Git repository URL
                git url: 'https://github.com/khadeerun/PlaywrightContactApp.git', branch: 'main', ${env.GIT_CREDENTIALS}
            }
        }

        stage('Install Dependencies') {
            steps {
                bat 'npm install'
                bat 'npx playwright install'
            }
        }

        stage('Run Playwright Test') {
            steps {
                bat 'npx playwright test'
            }
        }

        stage('Build') {
            steps {
                script {
                    def npmHome = tool name: 'NodeJS', type: 'jenkins.plugins.nodejs.tools.NodeJSInstallation'
                    env.PATH = "${npmHome}/bin:${env.PATH}"
                }
                bat 'npm run build'
            }
        }

        stage('Package') {
            steps {
                script {
                    def buildDir = 'dist/'
                    if (fileExists(buildDir)) {
                        bat "jar -cvf ${env.WORKSPACE}\\myapp.war -C ${buildDir} ."
                    } else {
                        error "Build directory '${buildDir}' does not exist"
                    }
                }
            }
        }

       stage('Deploy') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'MyTomcatCreds', usernameVariable: 'admin', passwordVariable: 'admin123')]) {
                    deploy adapters: [tomcat9(credentialsId: 'tomcatcredentialshub', url: 'http://your-tomcat-url')], contextPath: 'myapp', war: 'myapp.war'
                }
            }
        }
    }

    post {
        always {
           archiveArtifacts artifacts: 'playwright-report/**/*', allowEmptyArchive: true
            junit 'playwright-report/**/*.xml' 
        }
    }
}
